package com.kuongbk.model.impl;

import com.kuongbk.model.Author;
import com.kuongbk.model.AuthorModel;
import com.kuongbk.model.AuthorSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Author service. Represents a row in the &quot;MTT_Author&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.kuongbk.model.AuthorModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AuthorImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AuthorImpl
 * @see com.kuongbk.model.Author
 * @see com.kuongbk.model.AuthorModel
 * @generated
 */
@JSON(strict = true)
public class AuthorModelImpl extends BaseModelImpl<Author>
    implements AuthorModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a author model instance should use the {@link com.kuongbk.model.Author} interface instead.
     */
    public static final String TABLE_NAME = "MTT_Author";
    public static final Object[][] TABLE_COLUMNS = {
            { "uuid_", Types.VARCHAR },
            { "authorId", Types.BIGINT },
            { "groupId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "userName", Types.VARCHAR },
            { "createDate", Types.TIMESTAMP },
            { "modifiedDate", Types.TIMESTAMP },
            { "name", Types.VARCHAR },
            { "description", Types.VARCHAR },
            { "born", Types.TIMESTAMP },
            { "male", Types.BOOLEAN },
            { "status", Types.INTEGER }
        };
    public static final String TABLE_SQL_CREATE = "create table MTT_Author (uuid_ VARCHAR(75) null,authorId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,name VARCHAR(75) null,description VARCHAR(75) null,born DATE null,male BOOLEAN,status INTEGER)";
    public static final String TABLE_SQL_DROP = "drop table MTT_Author";
    public static final String ORDER_BY_JPQL = " ORDER BY author.createDate ASC";
    public static final String ORDER_BY_SQL = " ORDER BY MTT_Author.createDate ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.kuongbk.model.Author"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.kuongbk.model.Author"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.kuongbk.model.Author"),
            true);
    public static long COMPANYID_COLUMN_BITMASK = 1L;
    public static long GROUPID_COLUMN_BITMASK = 2L;
    public static long STATUS_COLUMN_BITMASK = 4L;
    public static long UUID_COLUMN_BITMASK = 8L;
    public static long CREATEDATE_COLUMN_BITMASK = 16L;
    public static final String MAPPING_TABLE_MTT_AUTHOR_BOOK_NAME = "MTT_author_book";
    public static final Object[][] MAPPING_TABLE_MTT_AUTHOR_BOOK_COLUMNS = {
            { "authorId", Types.BIGINT },
            { "bookId", Types.BIGINT }
        };
    public static final String MAPPING_TABLE_MTT_AUTHOR_BOOK_SQL_CREATE = "create table MTT_author_book (authorId LONG not null,bookId LONG not null,primary key (authorId, bookId))";
    public static final boolean FINDER_CACHE_ENABLED_MTT_AUTHOR_BOOK = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.MTT_author_book"), true);
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.kuongbk.model.Author"));
    private static ClassLoader _classLoader = Author.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] { Author.class };
    private String _uuid;
    private String _originalUuid;
    private long _authorId;
    private long _groupId;
    private long _originalGroupId;
    private boolean _setOriginalGroupId;
    private long _companyId;
    private long _originalCompanyId;
    private boolean _setOriginalCompanyId;
    private long _userId;
    private String _userUuid;
    private String _userName;
    private Date _createDate;
    private Date _modifiedDate;
    private String _name;
    private String _description;
    private Date _born;
    private Boolean _male;
    private int _status;
    private int _originalStatus;
    private boolean _setOriginalStatus;
    private long _columnBitmask;
    private Author _escapedModel;

    public AuthorModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Author toModel(AuthorSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Author model = new AuthorImpl();

        model.setUuid(soapModel.getUuid());
        model.setAuthorId(soapModel.getAuthorId());
        model.setGroupId(soapModel.getGroupId());
        model.setCompanyId(soapModel.getCompanyId());
        model.setUserId(soapModel.getUserId());
        model.setUserName(soapModel.getUserName());
        model.setCreateDate(soapModel.getCreateDate());
        model.setModifiedDate(soapModel.getModifiedDate());
        model.setName(soapModel.getName());
        model.setDescription(soapModel.getDescription());
        model.setBorn(soapModel.getBorn());
        model.setMale(soapModel.getMale());
        model.setStatus(soapModel.getStatus());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Author> toModels(AuthorSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Author> models = new ArrayList<Author>(soapModels.length);

        for (AuthorSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _authorId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setAuthorId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _authorId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Author.class;
    }

    @Override
    public String getModelClassName() {
        return Author.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("uuid", getUuid());
        attributes.put("authorId", getAuthorId());
        attributes.put("groupId", getGroupId());
        attributes.put("companyId", getCompanyId());
        attributes.put("userId", getUserId());
        attributes.put("userName", getUserName());
        attributes.put("createDate", getCreateDate());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("name", getName());
        attributes.put("description", getDescription());
        attributes.put("born", getBorn());
        attributes.put("male", getMale());
        attributes.put("status", getStatus());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String uuid = (String) attributes.get("uuid");

        if (uuid != null) {
            setUuid(uuid);
        }

        Long authorId = (Long) attributes.get("authorId");

        if (authorId != null) {
            setAuthorId(authorId);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        String userName = (String) attributes.get("userName");

        if (userName != null) {
            setUserName(userName);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        String name = (String) attributes.get("name");

        if (name != null) {
            setName(name);
        }

        String description = (String) attributes.get("description");

        if (description != null) {
            setDescription(description);
        }

        Date born = (Date) attributes.get("born");

        if (born != null) {
            setBorn(born);
        }

        Boolean male = (Boolean) attributes.get("male");

        if (male != null) {
            setMale(male);
        }

        Integer status = (Integer) attributes.get("status");

        if (status != null) {
            setStatus(status);
        }
    }

    @JSON
    @Override
    public String getUuid() {
        if (_uuid == null) {
            return StringPool.BLANK;
        } else {
            return _uuid;
        }
    }

    @Override
    public void setUuid(String uuid) {
        if (_originalUuid == null) {
            _originalUuid = _uuid;
        }

        _uuid = uuid;
    }

    public String getOriginalUuid() {
        return GetterUtil.getString(_originalUuid);
    }

    @JSON
    @Override
    public long getAuthorId() {
        return _authorId;
    }

    @Override
    public void setAuthorId(long authorId) {
        _authorId = authorId;
    }

    @JSON
    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        _columnBitmask |= GROUPID_COLUMN_BITMASK;

        if (!_setOriginalGroupId) {
            _setOriginalGroupId = true;

            _originalGroupId = _groupId;
        }

        _groupId = groupId;
    }

    public long getOriginalGroupId() {
        return _originalGroupId;
    }

    @JSON
    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        _columnBitmask |= COMPANYID_COLUMN_BITMASK;

        if (!_setOriginalCompanyId) {
            _setOriginalCompanyId = true;

            _originalCompanyId = _companyId;
        }

        _companyId = companyId;
    }

    public long getOriginalCompanyId() {
        return _originalCompanyId;
    }

    @JSON
    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    @JSON
    @Override
    public String getUserName() {
        if (_userName == null) {
            return StringPool.BLANK;
        } else {
            return _userName;
        }
    }

    @Override
    public void setUserName(String userName) {
        _userName = userName;
    }

    @JSON
    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _columnBitmask = -1L;

        _createDate = createDate;
    }

    @JSON
    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @JSON
    @Override
    public String getName() {
        if (_name == null) {
            return StringPool.BLANK;
        } else {
            return _name;
        }
    }

    @Override
    public void setName(String name) {
        _name = name;
    }

    @JSON
    @Override
    public String getDescription() {
        if (_description == null) {
            return StringPool.BLANK;
        } else {
            return _description;
        }
    }

    @Override
    public void setDescription(String description) {
        _description = description;
    }

    @JSON
    @Override
    public Date getBorn() {
        return _born;
    }

    @Override
    public void setBorn(Date born) {
        _born = born;
    }

    @JSON
    @Override
    public Boolean getMale() {
        return _male;
    }

    @Override
    public void setMale(Boolean male) {
        _male = male;
    }

    @JSON
    @Override
    public int getStatus() {
        return _status;
    }

    @Override
    public void setStatus(int status) {
        _columnBitmask |= STATUS_COLUMN_BITMASK;

        if (!_setOriginalStatus) {
            _setOriginalStatus = true;

            _originalStatus = _status;
        }

        _status = status;
    }

    public int getOriginalStatus() {
        return _originalStatus;
    }

    @Override
    public StagedModelType getStagedModelType() {
        return new StagedModelType(PortalUtil.getClassNameId(
                Author.class.getName()));
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            Author.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Author toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Author) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        AuthorImpl authorImpl = new AuthorImpl();

        authorImpl.setUuid(getUuid());
        authorImpl.setAuthorId(getAuthorId());
        authorImpl.setGroupId(getGroupId());
        authorImpl.setCompanyId(getCompanyId());
        authorImpl.setUserId(getUserId());
        authorImpl.setUserName(getUserName());
        authorImpl.setCreateDate(getCreateDate());
        authorImpl.setModifiedDate(getModifiedDate());
        authorImpl.setName(getName());
        authorImpl.setDescription(getDescription());
        authorImpl.setBorn(getBorn());
        authorImpl.setMale(getMale());
        authorImpl.setStatus(getStatus());

        authorImpl.resetOriginalValues();

        return authorImpl;
    }

    @Override
    public int compareTo(Author author) {
        int value = 0;

        value = DateUtil.compareTo(getCreateDate(), author.getCreateDate());

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Author)) {
            return false;
        }

        Author author = (Author) obj;

        long primaryKey = author.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        AuthorModelImpl authorModelImpl = this;

        authorModelImpl._originalUuid = authorModelImpl._uuid;

        authorModelImpl._originalGroupId = authorModelImpl._groupId;

        authorModelImpl._setOriginalGroupId = false;

        authorModelImpl._originalCompanyId = authorModelImpl._companyId;

        authorModelImpl._setOriginalCompanyId = false;

        authorModelImpl._originalStatus = authorModelImpl._status;

        authorModelImpl._setOriginalStatus = false;

        authorModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Author> toCacheModel() {
        AuthorCacheModel authorCacheModel = new AuthorCacheModel();

        authorCacheModel.uuid = getUuid();

        String uuid = authorCacheModel.uuid;

        if ((uuid != null) && (uuid.length() == 0)) {
            authorCacheModel.uuid = null;
        }

        authorCacheModel.authorId = getAuthorId();

        authorCacheModel.groupId = getGroupId();

        authorCacheModel.companyId = getCompanyId();

        authorCacheModel.userId = getUserId();

        authorCacheModel.userName = getUserName();

        String userName = authorCacheModel.userName;

        if ((userName != null) && (userName.length() == 0)) {
            authorCacheModel.userName = null;
        }

        Date createDate = getCreateDate();

        if (createDate != null) {
            authorCacheModel.createDate = createDate.getTime();
        } else {
            authorCacheModel.createDate = Long.MIN_VALUE;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            authorCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            authorCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        authorCacheModel.name = getName();

        String name = authorCacheModel.name;

        if ((name != null) && (name.length() == 0)) {
            authorCacheModel.name = null;
        }

        authorCacheModel.description = getDescription();

        String description = authorCacheModel.description;

        if ((description != null) && (description.length() == 0)) {
            authorCacheModel.description = null;
        }

        Date born = getBorn();

        if (born != null) {
            authorCacheModel.born = born.getTime();
        } else {
            authorCacheModel.born = Long.MIN_VALUE;
        }

        authorCacheModel.male = getMale();

        authorCacheModel.status = getStatus();

        return authorCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(27);

        sb.append("{uuid=");
        sb.append(getUuid());
        sb.append(", authorId=");
        sb.append(getAuthorId());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", userName=");
        sb.append(getUserName());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", name=");
        sb.append(getName());
        sb.append(", description=");
        sb.append(getDescription());
        sb.append(", born=");
        sb.append(getBorn());
        sb.append(", male=");
        sb.append(getMale());
        sb.append(", status=");
        sb.append(getStatus());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(43);

        sb.append("<model><model-name>");
        sb.append("com.kuongbk.model.Author");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>uuid</column-name><column-value><![CDATA[");
        sb.append(getUuid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>authorId</column-name><column-value><![CDATA[");
        sb.append(getAuthorId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userName</column-name><column-value><![CDATA[");
        sb.append(getUserName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>name</column-name><column-value><![CDATA[");
        sb.append(getName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>description</column-name><column-value><![CDATA[");
        sb.append(getDescription());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>born</column-name><column-value><![CDATA[");
        sb.append(getBorn());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>male</column-name><column-value><![CDATA[");
        sb.append(getMale());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>status</column-name><column-value><![CDATA[");
        sb.append(getStatus());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
